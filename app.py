from flask import Flask, jsonify, render_template
import openai
import os
import re
import random
import logging

app = Flask(__name__)

# OpenAI API key from environment variable
openai.api_key = os.getenv('OPENAI_API_KEY')

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/get-quiz', methods=['GET'])
def get_quiz():
    try:
        seed = random.randint(1000, 9999)
        response = openai.ChatCompletion.create(
            model="gpt-4o-mini",
            # messages=[
            #     {
            #         "role": "system",
            #         "content": "You are an aerospace engineer who wants to raise awareness about how satellite technologies are used in our daily lives on Earth."
            #     },
            #     {
            #         "role": "user",
            #         "content":
            #             "Generate a random quiz question about how satellite technology is used in various fields of daily life (e.g., time management, communications, observations, weather forecasting, land and ocean monitoring, security, surveillance, navigation, positioning, biological experiments, semiconductor manufacturing, medical production) or regarding issues related to satellites such as space debris. Provide four possible answers."\

            #             f"RandomSeed: {seed}"\
            #             "Answer in the following format:"\
            #             "Question: <question>"\
            #             "A) <answer 1>"\
            #             "B) <answer 2>"\
            #             "C) <answer 3>"\
            #             "D) <answer 4>"\
            #             "Correct answer: <correct answer>"\
            #             "Description: <description within 200 characters>"
            #     }
            # ],
            messages=[
                {
                    "role": "system",
                    "content": "あなたは、衛星技術が地球上の日常生活にどのように使用されているかについて認識を高めたいと考えている航空宇宙技術者です。"
                },
                {
                    "role": "user",
                    "content":
                        "衛星技術が日常生活のさまざまな分野（例：時間管理、通信、観測、天気予報、陸地と海洋のモニタリング、"\
                        "セキュリティ、監視、ナビゲーション、位置測定、生物学的実験、半導体製造、医療生産）でどのように使用されているか、"\
                        "または、宇宙ゴミなどの衛星に関連する問題に関するランダムなクイズを一つだけ生成してください。四つの選択肢を提供してください。"\

                        f"RandomSeed: {seed}"\
                        "次の形式で答えてください:"\
                        "質問: <質問文>"\
                        "A) <回答1>"\
                        "B) <回答2>"\
                        "C) <回答3>"\
                        "D) <回答4>"\
                        "正解: <正しい回答>"\
                        "説明文: <200字以内の説明文>"
                        # "例:\n"\
                        # "質問: 衛星技術は通信分野でどのように利用されていますか？\n"\
                        # "A) 地上の中継局を使用して信号を伝える\n"\
                        # "B) 衛星を介して遠隔地間のデータを送信する\n"\
                        # "C) 電波塔を利用して携帯電話ネットワークを構築する\n"\
                        # "D) 光ファイバーケーブルを使ってデータを転送する\n"\
                        # "正解: B\n"\
                        # "説明文: 通信衛星は、遠く離れた地域同士のデータ通信を可能にしています。地上局から衛星へ信号を送り、それを中継することで、広範囲にわたる高速かつ信頼性の高い通信が実現します。インターネット、テレビ放送、軍事通信などで広く利用されています。"
                }
            ],
            max_tokens=500,
            temperature=0.9,
            top_p=0.95
        )
        quiz_text = response.choices[0].message['content'].strip()
        quiz = parse_quiz(quiz_text)
        return jsonify({"quiz": quiz, "seed": seed})
    except Exception as e:
        return f"Error generating quiz: {e}"


def parse_quiz(text):
    """
    Parses the quiz text and extracts the question, answers, correct answer, and description.

    Parameters:
        text (str): The raw quiz text generated by ChatGPT.

    Returns:
        dict: A dictionary containing the parsed quiz components.
    """
    # Initialize variables
    question = None
    answers = {}
    correct_answer = None
    description = None

    # Define patterns to match lines
    question_pattern = re.compile(r'^質問[:：]\s*(.+)')
    answer_pattern = re.compile(r'^([ABCD])\)\s*(.+)')
    correct_pattern = re.compile(r'^正解[:：]\s*([ABCD])')
    description_pattern = re.compile(r'^説明文[:：]\s*(.+)')

    # Split the text into lines
    lines = text.split('\n')

    for line in lines:
        line = line.strip()  # Remove leading/trailing whitespace

        # Check for question
        q_match = question_pattern.match(line)
        if q_match:
            question = q_match.group(1).strip()
            continue

        # Check for answers
        a_match = answer_pattern.match(line)
        if a_match:
            key = a_match.group(1)
            value = a_match.group(2).strip()
            answers[key] = f"{key}) {value}"
            continue

        # Check for correct answer
        c_match = correct_pattern.match(line)
        if c_match:
            correct_answer = c_match.group(1).strip()
            continue

        # Check for description
        d_match = description_pattern.match(line)
        if d_match:
            description = d_match.group(1).strip()
            continue

    # Validation and error handling
    errors = []
    if not question:
        errors.append("質問が見つかりませんでした。")
    if len(answers) != 4:
        errors.append(f"回答が4つではありません。現在の数: {len(answers)}")
    else:
        # Ensure all options A-D are present
        for option in ['A', 'B', 'C', 'D']:
            if option not in answers:
                errors.append(f"回答オプション {option} が欠けています。")
    if not correct_answer:
        errors.append("正解が見つかりませんでした。")
    elif correct_answer not in answers:
        errors.append(f"正解 '{correct_answer}' が回答オプションに存在しません。")
    if not description:
        errors.append("説明文が見つかりませんでした。")

    if errors:
        error_message = "Unexpected format:\n" + "\n".join(errors)
        logging.error(f"Failed to parse quiz: {error_message}\nQuiz text:\n{text}")
        raise ValueError(error_message)

    # Compile the parsed quiz into a dictionary
    quiz = {
        "question": question,
        "answers": [answers['A'], answers['B'], answers['C'], answers['D']],
        "correct_answer": correct_answer,
        "description": description,
        "whole_text": text
    }

    return quiz

@app.route('/debug/')
def debug():
    return f"OpenAI API Key: {os.getenv('OPENAI_API_KEY')}"

if __name__ == '__main__':
    app.run(debug=True, host='0.0.0.0')
